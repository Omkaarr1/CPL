use blockchain;
use data_science;
use ml;
// Variable Assignments and Arithmetic Operations
x = 10;
x = x + 5;
print->"Value of x = " + x;
y = 20;
y++;
print->"Value of y after increment = " + y;
z = x * y;
print->"Value of z = " + z;

// Conditional Statement
if  (z > 100) { print->"z is greater than 100"; } else { print->"z is not greater than 100"; }

// Encrypted Variable
@ENCsecret = "mySecretValue";
print->"Encrypted secret = " + @ENCsecret;

// Event Trigger: Print "Hello" every 5 seconds

// Function Definition and Call
function add(a, b) {
  return a + b;
};

result = add(10, 20);
print->"Result of add function = " + result;

rfModel = ml.randomforest("scripts/data.csv", "class");
print->"Random Forest Model: " + rfModel;

// Blockchain Operations
blockchain.init("myPrivateKey", 1000);
blockchain.transaction("recipientAddress", 250);
blockchain.showCurrentBalance();
blockchain.showTransactionHistory();

// Data Science Operations
dataset = data_science.loadCSV("scripts/data2.csv");
meanAge = data_science.calculateMean(dataset, "age");
medianAge = data_science.calculateMedian(dataset, "age");
stdDevAge = data_science.calculateStdDev(dataset, "age");
print->"Mean age: " + meanAge;
print->"Median age: " + medianAge;
print->"Standard Deviation of age: " + stdDevAge;

// Visualization
data_science.plotHistogram(dataset, "age", "scripts/age_histogram.png");
data_science.plotScatter(dataset, "age", "salary", "scripts/age_salary_scatter.png");

// Data Filtering
filteredData = data_science.filterData(dataset, "age", ">", 30);
print->"Filtered Data Instances (age > 30): " + filteredData.numInstances();