use ml;
use blockchain;
// Variable assignments and arithmetic
x = 10;
x = x + 5;
print->"Value of x = " + x;
y = 20.5;
y++;
print->"Value of y after increment = " + y;
z = x * y;
print->"Value of z = " + z;

// Conditional statements with booleans
if (z > 100) { 
    print->"z is greater than 100"; 
} else { 
    print->"z is not greater than 100"; 
}

// For loop with array operations
for (i = 1; i <= 3; i++) {
    print->"Loop iteration: " + i;
    x = x + 1;
    print->"x incremented to: " + x;
}

// Input and string manipulation
input->"Enter your name:" -> name;
print->"Hello, " + name + "!";

// While loop
x = 0;
while (x < 3) {
    print->"Current value of x: " + x;
    x++;
}
print->"Loop completed.";

// Array operations
arr = [1, 2, 3, 4, 5];
print->"Initial array: " + arr;
arr += [6, 7];
print->"Array after concatenation: " + arr;

// Boolean operations
a = true;
b = false;
print->"a AND b: " + (a && b);
print->"a OR b: " + (a || b);
print->"NOT a: " + (!a);

// Floating-point operations
pi = 3.14159;
radius = 5;
area = pi * radius * radius;
print->"Area of the circle: " + area;


// Encrypted variable assignment
@ENCpassword = "mySecretPassword";
print->"Encrypted password: " + @ENCpassword;


// Encrypted numerical variable
@ENCsecretNumber = 42;
print->"Encrypted secret number: " + @ENCsecretNumber;

// Using encrypted variable in computation
result = @ENCsecretNumber * 2;
print->"Result after computation: " + result;

// Printing encrypted variable again
print->"Encrypted secret number after computation: " + @ENCsecretNumber;

// Time-based triggers (will print "Hello" every 5 seconds)
// @EVENT_TRIGGER(5,"seconds") -> print->"Hello from time-based event!";

// Time-based triggers (runs "Hello" every 5 seconds for 10 times)
 //@EVENT_TRIGGER(1,"seconds",2) -> print->"Hello from time-based event!";
// One-time future event trigger example (replace with a future date/time as desired)
// Format: YYYY-MM-DD HH:MM:SS
//@EVENT_TRIGGER("2024-12-14 12:18:00") -> print->"Happy New Year!";

ml.randomforest("data.csv");
//ml.kmeans("data.csv");

blockchain.init("MySuperSecretKey", 500);
print->"Blockchain wallet initialized!";

// Make a transaction with sufficient funds
blockchain.transaction("abcdef1234567890", 200);

// Attempt a transaction with insufficient funds (should fail)
blockchain.transaction("abcdef1234567890", 600);
